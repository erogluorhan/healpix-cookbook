{"version":"1","records":[{"hierarchy":{"lvl1":"HEALPix Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"HEALPix Cookbook"},"content":"  ","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"HEALPix Cookbook"},"type":"lvl1","url":"/#healpix-cookbook","position":2},{"hierarchy":{"lvl1":"HEALPix Cookbook"},"content":"\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers an introduction to the \n\nHierarchical Equal Area isoLatitude Pixelation (HEALPix) of the Earth and utilization of\n\n\neasy.gems and \n\nUXarray to run data analysis and visualization functionality on HEALPix data sets.","type":"content","url":"/#healpix-cookbook","position":3},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":4},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Motivation"},"content":"Driven by \n\nThe 2025 World Climate Research Programme (WCRP) Digital Earths Global KM-scale Hackathon taking place 12-16 May, a need\nfor exploring HEALPix and documenting HEALPix-based workflows that utilize community resources such as the easy.gems documentation and UXarray software tool has emerged. Project Pythia Cookbooks are a great\nmedium to publish such documentation in an accessible, reproducible, and citable manner, which can benefit not only the 2025 event but also future collaboration efforts and similar events.","type":"content","url":"/#motivation","position":5},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":6},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Authors"},"content":"Orhan Eroglu, \n\nPhilip Chmielowiec, \n\nAndrew Gettelman, \n\nJohn Clyne","type":"content","url":"/#authors","position":7},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":8},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":9},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Structure"},"content":"This cookbook is broken up into a few sections as follows:","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"1. HEALPix Overview","lvl2":"Structure"},"type":"lvl3","url":"/#id-1-healpix-overview","position":12},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"1. HEALPix Overview","lvl2":"Structure"},"content":"Here, we cover basic information about HEALPix necessary to understand the topics throughout the cookbook\nand provide a lot of links to the resources in order to learn more about HEALPix.","type":"content","url":"/#id-1-healpix-overview","position":13},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"2. easy.gems for HEALPix Analysis & Visualization","lvl2":"Structure"},"type":"lvl3","url":"/#id-2-easy-gems-for-healpix-analysis-visualization","position":14},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"2. easy.gems for HEALPix Analysis & Visualization","lvl2":"Structure"},"content":"This section provides examples of how to load in HEALPix data, use healpix package for basic HEALPix\nstatistics use easygems package’s convenience functions to plot the data with matplotlib.","type":"content","url":"/#id-2-easy-gems-for-healpix-analysis-visualization","position":15},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"3. UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Structure"},"type":"lvl3","url":"/#id-3-uxarray-for-basic-healpix-statistics-visualization","position":16},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"3. UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Structure"},"content":"This section walks the reader through loading in and performing basic analysis and visualization on HEALPix\ndata using UXarray.","type":"content","url":"/#id-3-uxarray-for-basic-healpix-statistics-visualization","position":17},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"4. Advanced UXarray Analysis and Visualization for HEALPix Data","lvl2":"Structure"},"type":"lvl3","url":"/#id-4-advanced-uxarray-analysis-and-visualization-for-healpix-data","position":18},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"4. Advanced UXarray Analysis and Visualization for HEALPix Data","lvl2":"Structure"},"content":"This section will cover advanced UXarray functionality such as remapping, zonal means, cross-sections, etc.","type":"content","url":"/#id-4-advanced-uxarray-analysis-and-visualization-for-healpix-data","position":19},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"5. When to Use Each?","lvl2":"Structure"},"type":"lvl3","url":"/#id-5-when-to-use-each","position":20},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"5. When to Use Each?","lvl2":"Structure"},"content":"This section is currently under construction, but once complete, we hope to provide some practical guidance\non what cases either of easy.gems or uxarray can provide helpful functionality and would be a\nideal choice.","type":"content","url":"/#id-5-when-to-use-each","position":21},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":22},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":23},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":24},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.\n\nNote, not all Cookbook chapters are executable. If you do not see\nthe rocket ship icon, such as on this page, you are not viewing an\nexecutable book chapter.","type":"content","url":"/#running-on-binder","position":25},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":26},{"hierarchy":{"lvl1":"HEALPix Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/healpix-cookbook repository: git clone https://github.com/ProjectPythia/healpix-cookbook.git\n\nMove into the healpix-cookbook directorycd healpix-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate healpix-cookbook\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":27},{"hierarchy":{"lvl1":"HEALPix Overview"},"type":"lvl1","url":"/notebooks/healpix","position":0},{"hierarchy":{"lvl1":"HEALPix Overview"},"content":"This first section of the cookbook aims at providing the reader with an introduction to \n\nHierarchical Equal Area isoLatitude Pixelation (HEALPix). However, rather than duplicating tons of information that is already available at HEALPix resources, we will try guiding the Pythia’s community in the right direction to access those resources.","type":"content","url":"/notebooks/healpix","position":1},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/healpix#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"In this section, you’ll learn:"},"content":"What is HEALPix?\n\nWhat resources can lead you to learn more about HEALPix?\n\nWhy HEALPix?","type":"content","url":"/notebooks/healpix#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"Related Documentation"},"type":"lvl3","url":"/notebooks/healpix#related-documentation","position":4},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"Related Documentation"},"content":"HEALPix Homepage\n\nHEALPix Documentation\n\nHEALPix Resources\n\nHEALPix Support","type":"content","url":"/notebooks/healpix#related-documentation","position":5},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/healpix#prerequisites","position":6},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nDiscrete Global Grid Systems\n\nHelpful\n\n\n\nTime to learn: 10 minutes\n\n","type":"content","url":"/notebooks/healpix#prerequisites","position":7},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"What is HEALPix?"},"type":"lvl2","url":"/notebooks/healpix#what-is-healpix","position":8},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"What is HEALPix?"},"content":"\n\nHEALPix is a high resolution discretization framework to provide equal area, iso-Latitude pixelation of a sphere for fast analysis of data distributed on it, which produces a subdivision of the spherical surface in which each pixel covers the same surface area as every other pixel at a given resolution level.\n\nHEALPix was originally devised to support fast and accurate mathematical calculations on a spherical discretization at sufficiently high resolution levels for satellite missions to measure the cosmic microwave background (CMB), and it has later been adopted to geoscience applications as well.\n\nBe sure to check out the \n\nHEALPix home page and the References at the end of this section for further details.\n\n\n\n","type":"content","url":"/notebooks/healpix#what-is-healpix","position":9},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"Why HEALPix?"},"type":"lvl2","url":"/notebooks/healpix#why-healpix","position":10},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"Why HEALPix?"},"content":"\n\nThree key features of HEALPix are:\n\nThe sphere is hierarchically tessellated into curvilinear quadrilaterals\n\nAreas of all pixels at a given resolution are identical\n\nPixels are distributed on lines of constant latitude\n\nThese properties make HEALPix a good gridding choice to facilitate fast and accurate statistical and spherical analysis for high-resolution data such as spherical harmonics.\n\n","type":"content","url":"/notebooks/healpix#why-healpix","position":11},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"Where to learn more about HEALPix?"},"type":"lvl2","url":"/notebooks/healpix#where-to-learn-more-about-healpix","position":12},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"Where to learn more about HEALPix?"},"content":"\n\nIn addition to the \n\nRelated Documentation provided in the beginning of this notebook, there are some good resources that you can further learn HEALPix through. In this part, we’d like to introduce one of them, easy.gems:\n\n","type":"content","url":"/notebooks/healpix#where-to-learn-more-about-healpix","position":13},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"easy.gems","lvl2":"Where to learn more about HEALPix?"},"type":"lvl3","url":"/notebooks/healpix#easy-gems","position":14},{"hierarchy":{"lvl1":"HEALPix Overview","lvl3":"easy.gems","lvl2":"Where to learn more about HEALPix?"},"content":"DKRZ (The German Climate Computing Center) created \n\neasy.gems for documenting high-resolution climate simulation output and its analysis, which was started within the frame of the \n\nDYAMOND intercomparison initiative.\n\nSince output in multiple resolutions (hierarchical) is written on the HEALPix grid in order to simplify and speed up analysis, easy.gems provides \n\ndocumentation for a range of applications such as getting started with HEALPix, using HEALPix analysis and plotting functionality on the simulation data, and performing conversions between HEALPix and other grid types.\n\nThe \n\nnext section will showcase an easy.gems workflow that loads in, manipulates, analyzes, and visualizes HEALpix data, which uses easy.gems functions and other scientific Python ecosystem packages’ functionality recommended by easy.gems.\n\n","type":"content","url":"/notebooks/healpix#easy-gems","position":15},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"References"},"type":"lvl2","url":"/notebooks/healpix#references","position":16},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"References"},"content":"Gorski et al. 2005 “HEALPix: A framework for high-resolution discretization and fast analysis of data distributed on the sphere”\n\nPeterson et al. 2016 “Discrete global grid systems”\n\n","type":"content","url":"/notebooks/healpix#references","position":17},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"What is next?"},"type":"lvl2","url":"/notebooks/healpix#what-is-next","position":18},{"hierarchy":{"lvl1":"HEALPix Overview","lvl2":"What is next?"},"content":"The \n\nnext section will provide an easy.gems workflow that uses HEALPix data.","type":"content","url":"/notebooks/healpix#what-is-next","position":19},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization"},"type":"lvl1","url":"/notebooks/easygems","position":0},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization"},"content":"","type":"content","url":"/notebooks/easygems","position":1},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization"},"type":"lvl1","url":"/notebooks/easygems#easy-gems-for-healpix-analysis-visualization","position":2},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization"},"content":"","type":"content","url":"/notebooks/easygems#easy-gems-for-healpix-analysis-visualization","position":3},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/easygems#in-this-section-youll-learn","position":4},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"In this section, you’ll learn:"},"content":"Utilizing intake to open a HEALPix data catalog\n\nUsing the healpix package to perform HEALPix operations to look at basic statistics\n\nPlotting HEALPix data via easy.gems functionality","type":"content","url":"/notebooks/easygems#in-this-section-youll-learn","position":5},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Related Documentation"},"type":"lvl3","url":"/notebooks/easygems#related-documentation","position":6},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Related Documentation"},"content":"Getting started with hierarchical HEALPix data - easy.gems Documentation\n\nPlotting with cartopy - easy.gems Documentation\n\nIntake Cookbook","type":"content","url":"/notebooks/easygems#related-documentation","position":7},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/easygems#prerequisites","position":8},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nHEALPix overview\n\nNecessary\n\n\n\nTime to learn: 30 minutes\n\n","type":"content","url":"/notebooks/easygems#prerequisites","position":9},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Open data catalog"},"type":"lvl2","url":"/notebooks/easygems#open-data-catalog","position":10},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Open data catalog"},"content":"\n\nNote\n\nIf you think that you first need to learn about Intake, Pythia’s \n\nIntake Cookbook is a great resource to do so.\n\nLet us use the online data catalog from the WCRP’s Digital Earths Global Hackathon 2025’s \n\ncatalog repository using intake and read the output of the ICON simulation run ngc4008, which is stored in the HEALPix format:\n\nimport intake\n\n# Hackathon data catalogs\ncat_url = \"https://digital-earths-global-hackathon.github.io/catalog/catalog.yaml\"\ncat = intake.open_catalog(cat_url).online\nmodel_run = cat.icon_ngc4008\n\nNote\n\nWe highly recommend checking out the \n\neasy.gems documentation on HEALPix data catalogs to understand the zoom and time parametrization of the model runs in the catalogs. In short, each model run has an independent Dataset for each combination of the zoom and time parameters as depicted below (image credit \n\neasy.gems documentation on HEALPix data catalogs, and “PT30M” in this figure should be “PT15M”, 15 minutes, for the hackathon data we are using here)\n\n\n\n","type":"content","url":"/notebooks/easygems#open-data-catalog","position":11},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Explore datasets"},"type":"lvl2","url":"/notebooks/easygems#explore-datasets","position":12},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Explore datasets"},"content":"\n\nSo, the coarsest dataset in this model run would be as follows (Even if we called it without specifying any parameters, i.e. model_run.to_dask(), the result would be same as the ds_coarsest below since this model run defaults to the coarsest settings):\n\nds_coarsest = model_run(zoom=0, time=\"P1D\").to_dask()\nds_coarsest\n\nNow, let us look at a dataset with finer zoom level still with the coarsest time and another dataset with a finer zoom level and the finest time (which may be useful for daily analyses) dataset:\n\nds_fine = model_run(zoom=7).to_dask()\nds_fine\n\nds_finesttime = model_run(zoom=6, time=\"PT15M\").to_dask()\nds_finesttime\n\n","type":"content","url":"/notebooks/easygems#explore-datasets","position":13},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"HEALPix basic stats with thehealpix package"},"type":"lvl2","url":"/notebooks/easygems#healpix-basic-stats-with-thehealpix-package","position":14},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"HEALPix basic stats with thehealpix package"},"content":"\n\nLet us look at the global and Boulder, CO, USA temperature averages for a 3-year time-slice of the whole dataset.\n\nFor this, we will first need to define a few HEALPix helper functions to get the nest and nside values from the dataset, then find the HEALPix pixel that Boulder coords fall in, and finally plot those temporal averages using matplotlib.\n\nimport healpix as hp\nimport matplotlib.pylab as plt\n\n","type":"content","url":"/notebooks/easygems#healpix-basic-stats-with-thehealpix-package","position":15},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"HEALPix helper functions","lvl2":"HEALPix basic stats with thehealpix package"},"type":"lvl3","url":"/notebooks/easygems#healpix-helper-functions","position":16},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"HEALPix helper functions","lvl2":"HEALPix basic stats with thehealpix package"},"content":"\n\ndef get_nest(ds):\n    return ds.crs.healpix_order == \"nest\"\n    \ndef get_nside(ds):\n    return ds.crs.healpix_nside\n\n","type":"content","url":"/notebooks/easygems#healpix-helper-functions","position":17},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"HEALPix pixel containing Boulder’s coords","lvl2":"HEALPix basic stats with thehealpix package"},"type":"lvl3","url":"/notebooks/easygems#healpix-pixel-containing-boulders-coords","position":18},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"HEALPix pixel containing Boulder’s coords","lvl2":"HEALPix basic stats with thehealpix package"},"content":"\n\n%%time\nboulder_lon = -105.2747\nboulder_lat = 40.0190\n\nboulder_pixel = hp.ang2pix(\n    get_nside(ds_fine), boulder_lon, boulder_lat, lonlat=True, nest=get_nest(ds_fine)\n)\n\n","type":"content","url":"/notebooks/easygems#healpix-pixel-containing-boulders-coords","position":19},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Global and Boulder’s temperature averages","lvl2":"HEALPix basic stats with thehealpix package"},"type":"lvl3","url":"/notebooks/easygems#global-and-boulders-temperature-averages","position":20},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Global and Boulder’s temperature averages","lvl2":"HEALPix basic stats with thehealpix package"},"content":"\n\n%%time\ntime_slice = slice(\"2020-01-02T00:00:00.000000000\", \"2023-01-01T00:00:00.000000000\")\n\nds_fine.tas.sel(time=time_slice).isel(cell=boulder_pixel).plot(label=\"Boulder\")\n\nds_coarsest.tas.sel(time=time_slice).mean(\"cell\").plot(label=\"Global mean\")\n\nplt.legend()\n\n","type":"content","url":"/notebooks/easygems#global-and-boulders-temperature-averages","position":21},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Plotting with easy.gems and cartopy"},"type":"lvl2","url":"/notebooks/easygems#plotting-with-easy-gems-and-cartopy","position":22},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Plotting with easy.gems and cartopy"},"content":"\n\nIn this part, we will look at the  healpix_show function that is provided by easy.gems for convenient HEALPix plotting.\n\nimport easygems.healpix as eghp\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cf\nimport cmocean\n\n","type":"content","url":"/notebooks/easygems#plotting-with-easy-gems-and-cartopy","position":23},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Global plots","lvl2":"Plotting with easy.gems and cartopy"},"type":"lvl3","url":"/notebooks/easygems#global-plots","position":24},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Global plots","lvl2":"Plotting with easy.gems and cartopy"},"content":"\n\nMost of this is matplotlib and cartopy code, but have a look at how eghp.healpix_show() is called. The following code will plot global temperature (at the first timestep for simplicity)\n\nprojection = ccrs.Robinson(central_longitude=-135.5808361)\n\nfig, ax = plt.subplots(\n    figsize=(8, 4), subplot_kw={\"projection\": projection}, constrained_layout=True\n)\n\nax.set_global()\n\neghp.healpix_show(ds_fine.tas.isel(time=0), ax=ax, cmap=cmocean.cm.thermal)\n\nax.add_feature(cf.COASTLINE, linewidth=0.8)\nax.add_feature(cf.BORDERS, linewidth=0.4)\n\n","type":"content","url":"/notebooks/easygems#global-plots","position":25},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Regional plots","lvl2":"Plotting with easy.gems and cartopy"},"type":"lvl3","url":"/notebooks/easygems#regional-plots","position":26},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl3":"Regional plots","lvl2":"Plotting with easy.gems and cartopy"},"content":"\n\nIf plotting a region of interest is desired, it is also possible through setting extents of the matplotlib plot.\n\nLet us look into USA map using the Boulder, CO, USA coords we had used before for simplicity:\n\nprojection = ccrs.Robinson(central_longitude=boulder_lon)\n\nfig, ax = plt.subplots(\n    figsize=(8, 4), subplot_kw={\"projection\": projection}, constrained_layout=True\n)\nax.set_extent([boulder_lon-20, boulder_lon+40, boulder_lat-20, boulder_lat+10], crs=ccrs.PlateCarree())\n\neghp.healpix_show(ds_fine.tas.isel(time=0), ax=ax, cmap=cmocean.cm.thermal)\n\nax.add_feature(cf.COASTLINE, linewidth=0.8)\nax.add_feature(cf.BORDERS, linewidth=0.4)\n\n","type":"content","url":"/notebooks/easygems#regional-plots","position":27},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Further easy.gems and healpix"},"type":"lvl2","url":"/notebooks/easygems#further-easy-gems-and-healpix","position":28},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"Further easy.gems and healpix"},"content":"\n\nThese are only a sampling of HEALPix and easy.gems capabilities; if you are interested in learning more, be sure to check out the usage examples at the \n\neasy.gems HEALPix Documentation.\n\n","type":"content","url":"/notebooks/easygems#further-easy-gems-and-healpix","position":29},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"What is next?"},"type":"lvl2","url":"/notebooks/easygems#what-is-next","position":30},{"hierarchy":{"lvl1":"easy.gems for HEALPix Analysis & Visualization","lvl2":"What is next?"},"content":"The \n\nnext section will provide an UXarray workflow that loads in and analyzes & visualizes HEALPix data.","type":"content","url":"/notebooks/easygems#what-is-next","position":31},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization"},"type":"lvl1","url":"/notebooks/uxarray","position":0},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization"},"content":"","type":"content","url":"/notebooks/uxarray","position":1},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization"},"type":"lvl1","url":"/notebooks/uxarray#uxarray-for-basic-healpix-statistics-visualization","position":2},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization"},"content":"","type":"content","url":"/notebooks/uxarray#uxarray-for-basic-healpix-statistics-visualization","position":3},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/uxarray#in-this-section-youll-learn","position":4},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"In this section, you’ll learn:"},"content":"Utilizing intake to open a HEALPix data catalog\n\nUsing the uxarray package to look at basic statistics over HEALPix data\n\nUsing UXarray plotting functionality on HEALPix data","type":"content","url":"/notebooks/uxarray#in-this-section-youll-learn","position":5},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Related Documentation"},"type":"lvl3","url":"/notebooks/uxarray#related-documentation","position":6},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Related Documentation"},"content":"UXarray homepage\n\nWorking with HEALPix data - UXarray documentation\n\nUXarray overview - Unstructured Grids Visualization Cookbook\n\nData visualization with UXarray - Unstructured Grids Visualization Cookbook\n\nSubsetting - UXarray documentation\n\nIntake Cookbook","type":"content","url":"/notebooks/uxarray#related-documentation","position":7},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/uxarray#prerequisites","position":8},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nUXarray\n\nNecessary\n\n\n\nHEALPix overview\n\nNecessary\n\n\n\nTime to learn: 30 minutes\n\nimport cartopy.crs as ccrs\nimport uxarray as ux\n\n","type":"content","url":"/notebooks/uxarray#prerequisites","position":9},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Open data catalog"},"type":"lvl2","url":"/notebooks/uxarray#open-data-catalog","position":10},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Open data catalog"},"content":"\n\nNote\n\nIf you think that you first need to learn about Intake, Pythia’s \n\nIntake Cookbook is a great resource to do so.\n\nLet us use the online data catalog from the WCRP’s Digital Earths Global Hackathon 2025’s \n\ncatalog repository using intake and read the output of the ICON simulation run ngc4008, which is stored in the HEALPix format:\n\nNote\n\nThis section uses the same data and will showcase similar operations as the \n\nprevious section, e.g. basic statistics and global and regional data plotting, except at the end where further grid exploration methods will be demonstrated.\n\nimport intake\n\n# Hackathon data catalogs\ncat_url = \"https://digital-earths-global-hackathon.github.io/catalog/catalog.yaml\"\ncat = intake.open_catalog(cat_url).online\nmodel_run = cat.icon_ngc4008\n\nWe will be looking at two resolution levels, one is the coarsest zoom level of 0, which is the default in this model run, and the other is a finer one at the zoom level of 7:\n\nds_coarsest = model_run().to_dask()\nds_fine = model_run(zoom=7).to_dask()\n\n","type":"content","url":"/notebooks/uxarray#open-data-catalog","position":11},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Create UXarray Datasets from HEALPix","lvl2":"Open data catalog"},"type":"lvl3","url":"/notebooks/uxarray#create-uxarray-datasets-from-healpix","position":12},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Create UXarray Datasets from HEALPix","lvl2":"Open data catalog"},"content":"Now let us use those xarray.Datasets from the model run to open unstructured grid-aware uxarray.UxDataset:\n\n%%time\nuxds_coarsest = ux.UxDataset.from_healpix(ds_coarsest)\n\nuxds_fine = ux.UxDataset.from_healpix(ds_fine)\nuxds_fine\n\n","type":"content","url":"/notebooks/uxarray#create-uxarray-datasets-from-healpix","position":13},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"HEALPix basic stats using UXarray"},"type":"lvl2","url":"/notebooks/uxarray#healpix-basic-stats-using-uxarray","position":14},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"HEALPix basic stats using UXarray"},"content":"\n\nLet us look at the global and Boulder, CO, USA air temperature averages for the dataset. Data spans from 2020 to 2050, so let us also consider slicing it to have a 3-year interval between 2020 and 2023, which would also give us similar results to that with easy.gems in the \n\nprevious section.\n\nimport matplotlib.pylab as plt\n\nboulder_lon = -105.2747\nboulder_lat = 40.0190\n\ntime_slice = slice(\"2020-01-02T00:00:00.000000000\", \"2023-01-01T00:00:00.000000000\")\n\n","type":"content","url":"/notebooks/uxarray#healpix-basic-stats-using-uxarray","position":15},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Mesh face containing Boulder’s coords","lvl2":"HEALPix basic stats using UXarray"},"type":"lvl3","url":"/notebooks/uxarray#mesh-face-containing-boulders-coords","position":16},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Mesh face containing Boulder’s coords","lvl2":"HEALPix basic stats using UXarray"},"content":"We can find face(s) containing a given point with uxarray conveniently as follows:\n\n%%time\nboulder_face = uxds_fine.uxgrid.get_faces_containing_point(\n    point_lonlat=[boulder_lon, boulder_lat]\n)\n\n","type":"content","url":"/notebooks/uxarray#mesh-face-containing-boulders-coords","position":17},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Data variables of interest","lvl2":"HEALPix basic stats using UXarray"},"type":"lvl3","url":"/notebooks/uxarray#data-variables-of-interest","position":18},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Data variables of interest","lvl2":"HEALPix basic stats using UXarray"},"content":"In order to use in the rest of the analyses, we can grab data variables, in theuxarray.UxDataArray type, from the dataset as follows:\n\nuxda_fine = uxds_fine.tas\nuxda_coarsest = uxds_coarsest.tas\n\n","type":"content","url":"/notebooks/uxarray#data-variables-of-interest","position":19},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Global and Boulder’s temperature averages","lvl2":"HEALPix basic stats using UXarray"},"type":"lvl3","url":"/notebooks/uxarray#global-and-boulders-temperature-averages","position":20},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Global and Boulder’s temperature averages","lvl2":"HEALPix basic stats using UXarray"},"content":"\n\nIn order to get a line plot of our UXarray.UxDataset objects’ 1-dimensional temperature variables, we will convert them to xarray and call the default plot function because UXarray’s default plotting functions are all dedicated to grid-topology aware visualizations:\n\n%%time\nuxda_fine.isel(n_face=boulder_face).sel(time=time_slice).to_xarray().plot(\n    label=\"Boulder\"\n)\nuxda_coarsest.sel(time=time_slice).mean(\"n_face\").to_xarray().plot(label=\"Global mean\")\n\nplt.legend()\n\n","type":"content","url":"/notebooks/uxarray#global-and-boulders-temperature-averages","position":21},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Data plotting with UXarray"},"type":"lvl2","url":"/notebooks/uxarray#data-plotting-with-uxarray","position":22},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Data plotting with UXarray"},"content":"\n\nUXarray provides several built-in plotting functions to visualize unstructured grids, which can also be applied to HEALPix grids in the same interface:\n\nLet us first look into interactive plots with the bokeh backend (i.e. UXarray’s plotting functions have a backend parameter that defaults to “bokeh”, and it can also accept “matplotlib”)\n\n","type":"content","url":"/notebooks/uxarray#data-plotting-with-uxarray","position":23},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Global plots","lvl2":"Data plotting with UXarray"},"type":"lvl3","url":"/notebooks/uxarray#global-plots","position":24},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Global plots","lvl2":"Data plotting with UXarray"},"content":"\n\nLet us first plot the global temperature (at the first timestep for simplicity), using the default backend, bokeh, of UXarray’s visualization API to create an interactive plot:\n\n%%time\n\nprojection = ccrs.Robinson(central_longitude=-135.5808361)\n\nuxda_fine.isel(time=0).plot(\n    projection=projection,\n    cmap=\"inferno\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Global temperature\",\n    width=700,\n)\n\nNow, let us create the same plot, using matplotlib as the backend:\n\n%%time\n\nuxda_fine.isel(time=0).plot(\n    backend=\"matplotlib\",\n    projection=projection,\n    cmap=\"inferno\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Global temperature\",\n    width=1100,\n)\n\n","type":"content","url":"/notebooks/uxarray#global-plots","position":25},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Regional subsets (Not only for plotting but also for analysis)","lvl2":"Data plotting with UXarray"},"type":"lvl3","url":"/notebooks/uxarray#regional-subsets-not-only-for-plotting-but-also-for-analysis","position":26},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl3":"Regional subsets (Not only for plotting but also for analysis)","lvl2":"Data plotting with UXarray"},"content":"\n\nWhen a region on the globe is of interest, UXarray provides subsetting functions, which return new regional grids that can then be used in the same way a global grid is plotted.\n\nLet us look into the USA map using the Boulder, CO, USA coords we had used before for simplicity:\n\nSubsetting uxds_fine into a new UxDataset using a “bounding box” around Boulder, CO first:\n\n%%time\n\nlon_bounds = (boulder_lon - 20, boulder_lon + 40)\nlat_bounds = (boulder_lat - 20, boulder_lat + 12)\n\nuxda_fine_subset = uxda_fine.isel(time=0).subset.bounding_box(lon_bounds, lat_bounds)\n\nIf we check the global and regional subset’s average temperature at the first timestep, we can see the difference:\n\nprint(\n    \"Global temperature average: \", uxda_fine.isel(time=0).mean(\"n_face\").values, \" K\"\n)\nprint(\n    \"Regional subset's temperature average: \", uxda_fine_subset.mean(\"n_face\").values, \" K\"\n)\n\nNow, let us plot the regional subset UxDataset:\n\n%%time\nprojection = ccrs.Robinson(central_longitude=boulder_lon)\n\nuxda_fine_subset.plot(\n    projection=projection,\n    cmap=\"inferno\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Boulder temperature\",\n    width=1100,\n)\n\n","type":"content","url":"/notebooks/uxarray#regional-subsets-not-only-for-plotting-but-also-for-analysis","position":27},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Grid topology exploration"},"type":"lvl2","url":"/notebooks/uxarray#grid-topology-exploration","position":28},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"Grid topology exploration"},"content":"\n\nExploring the grid topology may be needed sometimes, and UXarray provides functionality to do so, both numerically and visually. Each UxDataset or UxDataArray has their associated Grid object that has all the information such as spherical and cartesian coordinates, connectives, dimensions, etc. about the topology this data belongs to. This Grid object can be explored as follows:\n\n# uxds_fine.uxgrid   # this would give the same as the below\nuxda_fine.uxgrid\n\nThere might be times that the user wants to open a standalone Grid object for a HEALPix grid (or any other unstructured grids supported by UXarray) without accessing the data yet. Let’s create the coarsest HEALPix grid as follows:\n\nuxgrid = ux.Grid.from_healpix(zoom=0, pixels_only=False)\nuxgrid\n\nLet’s investigate how a HEALPix grid looks like over the poles. We can do things by selecting an Orthographic projection and setting a Geodetic source projection. This allows to better approximates the true HEALPix structured compared to the defaut PlateCaree projection.\n\nprojection = ccrs.Orthographic(central_latitude=90)\nprojection.threshold /= 100  # Smoothes out great circle arcs\n\nuxgrid.plot(\n    periodic_elements=\"ignore\",  # Allow Cartopy to handle periodic elements\n    crs=ccrs.Geodetic(),  # Enables edges to be plotted as GCAs\n    project=True,\n    projection=projection,\n    width=500,\n    title=\"HEALPix (Orthographic Proj), zoom=0\",\n)\n\nLet’s chose another projection.\n\nprojection = ccrs.Mollweide()\nprojection.threshold /= 100  # Smoothes out great circle arcs\n\nuxgrid.plot(\n    periodic_elements=\"ignore\",  # Allow Cartopy to handle periodic elements\n    crs=ccrs.Geodetic(),  # Enables edges to be plotted as GCAs\n    project=True,\n    projection=projection,\n    width=500,\n    title=\"HEALPix (Mollweide Proj), zoom=0\",\n)\n\nThe grid structure here is approximated. While the boundary between each pixel is easily known in HEALPix workflows, UXarray represents the boundaries as a Great Circle Arc (GCA) due to the requirement of having explicit connectivity information, which is different than HEALPix boundaries and leads to minor differences in the computed plots and computations.\n\nNow that we’ve looked at the grid structure, we can also apply the same principles to our data plotting.\n\nWarning\n\nUsing the Geodetic source projection is not reccomended for higher-resolution grids, as it introduces a significant overhead.\n\nuxda_coarsest.isel(time=0).plot(\n    periodic_elements=\"ignore\",  # Allow Cartopy to handle periodic elements\n    crs=ccrs.Geodetic(),  # Enables edges to be plotted as GCAs\n    project=True,\n    projection=projection,\n    features=[\"borders\", \"coastline\"],\n    cmap=\"inferno\",\n    title=\"Temperature (Mollweide Proj), zoom=0\",\n    width=500,\n)\n\n","type":"content","url":"/notebooks/uxarray#grid-topology-exploration","position":29},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"What is next?"},"type":"lvl2","url":"/notebooks/uxarray#what-is-next","position":30},{"hierarchy":{"lvl1":"UXarray for Basic HEALPix Statistics & Visualization","lvl2":"What is next?"},"content":"The \n\nnext section will provide an UXarray workflow that loads in and analyzes & visualizes HEALPix data.","type":"content","url":"/notebooks/uxarray#what-is-next","position":31},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization"},"type":"lvl1","url":"/notebooks/uxarray-advanced","position":0},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization"},"content":"","type":"content","url":"/notebooks/uxarray-advanced","position":1},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization"},"type":"lvl1","url":"/notebooks/uxarray-advanced#uxarray-for-advanced-healpix-analysis-visualization","position":2},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization"},"content":"","type":"content","url":"/notebooks/uxarray-advanced#uxarray-for-advanced-healpix-analysis-visualization","position":3},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/uxarray-advanced#in-this-section-youll-learn","position":4},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"In this section, you’ll learn:"},"content":"Using the uxarray package to perform advanced analysis operators over HEALPix data such as non-conservative zonal means, etc.","type":"content","url":"/notebooks/uxarray-advanced#in-this-section-youll-learn","position":5},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Related Documentation"},"type":"lvl3","url":"/notebooks/uxarray-advanced#related-documentation","position":6},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Related Documentation"},"content":"UXarray homepage\n\nWorking with HEALPix data - UXarray documentation\n\nUXarray overview - Unstructured Grids Visualization Cookbook\n\nData visualization with UXarray - Unstructured Grids Visualization Cookbook\n\nCross-sections - UXarray documentation\n\nIntake Cookbook","type":"content","url":"/notebooks/uxarray-advanced#related-documentation","position":7},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/uxarray-advanced#prerequisites","position":8},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nUXarray\n\nNecessary\n\n\n\nHEALPix overview\n\nNecessary\n\n\n\nTime to learn: 30 minutes\n\nimport cartopy.crs as ccrs\nimport intake\nimport uxarray as ux\n\n","type":"content","url":"/notebooks/uxarray-advanced#prerequisites","position":9},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Open data catalog"},"type":"lvl2","url":"/notebooks/uxarray-advanced#open-data-catalog","position":10},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Open data catalog"},"content":"\n\nTip\n\nWe assume that you have already gone over the previous section, \n\nUXarray for Basic HEALPix Statistics & Visualization. If not and if you need to learn about data catalogs in general and the data we will use throughout this notebook, we recommend to check that section first.\n\nLet us open the online catalog from the \n\nWCRP’s Digital Earths Global Hackathon 2025 catalog repository using intake and read the output of the ICON run d3hp003, which is stored in the HEALPix format:\n\ncat_url = \"https://digital-earths-global-hackathon.github.io/catalog/catalog.yaml\"\ncat = intake.open_catalog(cat_url)\nmodel_run = cat.online.icon_d3hp003\n\nWe can look into the highest possible resolution level allowed in this dataset at zoom level = 9 as Xarray.Dataset:\n\nds = model_run(zoom=9, time=\"P1D\").to_dask()\n\n","type":"content","url":"/notebooks/uxarray-advanced#open-data-catalog","position":11},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Create UXarray Datasets from HEALPix","lvl2":"Open data catalog"},"type":"lvl3","url":"/notebooks/uxarray-advanced#create-uxarray-datasets-from-healpix","position":12},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Create UXarray Datasets from HEALPix","lvl2":"Open data catalog"},"content":"We can use UXarray’s from_healpix API as follows to open a HEALPix grid from xarray.Dataset:\n\nuxds = ux.UxDataset.from_healpix(ds)\nuxds\n\n","type":"content","url":"/notebooks/uxarray-advanced#create-uxarray-datasets-from-healpix","position":13},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Data variable of interest","lvl2":"Open data catalog"},"type":"lvl3","url":"/notebooks/uxarray-advanced#data-variable-of-interest","position":14},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Data variable of interest","lvl2":"Open data catalog"},"content":"Then let us pick a variable, the surface temperature, from the dataset, which will give us an uxarray.UxDataArray:\n\nuxda = uxds[\"ts\"]\nuxda\n\n","type":"content","url":"/notebooks/uxarray-advanced#data-variable-of-interest","position":15},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Global mean and plot","lvl2":"Open data catalog"},"type":"lvl3","url":"/notebooks/uxarray-advanced#global-mean-and-plot","position":16},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Global mean and plot","lvl2":"Open data catalog"},"content":"Computing the global surface temperature mean (at the first timestep) and also having a quick plot of it would be a good idea to have as references to compare the upcoming analyses & visualizations to them:\n\nprint(\n    \"Global surface temperature average on \", uxda.time[0].values, \": \", uxda.isel(time=0).mean().values, \" K\"\n)\n\n%%time\n\nprojection = ccrs.Robinson()\n\nuxda.isel(time=0).plot(\n    projection=projection,\n    cmap=\"inferno\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Global surface temperature (Polygon raster)\",\n    width=700,\n)\n\n","type":"content","url":"/notebooks/uxarray-advanced#global-mean-and-plot","position":17},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Rasterized point plots"},"type":"lvl2","url":"/notebooks/uxarray-advanced#rasterized-point-plots","position":18},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Rasterized point plots"},"content":"When working with a higher-resolution dataset at a global scale, it’s not always practical to render each cell as a polygon. Instead, we can rasterize the center of each pixel.\n\n%%time\nprojection = ccrs.Robinson()\n\n# Controls the size of each pixel (smaller value leads to larger pixels)\npixel_ratio = 0.5\n\nuxda.isel(time=0).plot.points(\n    projection=projection,\n    rasterize=True,\n    dynamic=False,\n    width=1000,\n    height=500,\n    pixel_ratio=pixel_ratio,\n    cmap=\"inferno\",\n    title=f\"Global surface temperature (Point raster), pixel_ratio={pixel_ratio}\",\n)\n\nIf we decrease the size of each pixel (by setting the pixel ratio to a higher value), we can start to see missing values, which is due to a lower density of points near the poles, leading to some pixels not containing any of our original points.\n\nBecause of this, it’s useful to try a few pixel_ratio values and see which one works best for your given resolution.\n\nprojection = ccrs.Robinson()\n\n# Controls the size of each pixel (smaller value leads to larger pixels)\npixel_ratio = 2.0\n\nuxda.isel(time=0).plot.points(\n    projection=projection,\n    rasterize=True,\n    dynamic=False,\n    width=1000,\n    height=500,\n    pixel_ratio=pixel_ratio,\n    cmap=\"inferno\",\n    title=f\"Global surface temperature (Point raster) with a bad pixel size selection, pixel_ratio={pixel_ratio}\",\n)\n\n","type":"content","url":"/notebooks/uxarray-advanced#rasterized-point-plots","position":19},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Cross-sections"},"type":"lvl2","url":"/notebooks/uxarray-advanced#cross-sections","position":20},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Cross-sections"},"content":"We can look at constant latitude/longitude cross-sections of an uxarray.UxDataArray:\n\nboulder_lat = 40.0190\n\n\n# With fine resolutions like zoom level of 9, it is visually hard to observe the cross-sections,\n# so we will use a zoom level of 4 for a better visualization\nuxda_coarse = ux.UxDataset.from_healpix(model_run(zoom=4, time=\"P1D\").to_dask())[\"ts\"]\nuxda_coarse.uxgrid.face_node_connectivity\n\nuxda_lat = uxda_coarse.cross_section.constant_latitude(boulder_lat)\nuxda_lat\n\nimport geoviews.feature as gf\n\nuxda_lat.isel(time=0).plot(\n    rasterize=False,\n    projection=projection,\n    global_extent=True,\n    cmap=\"inferno\",\n    clim=(220, 310),\n    features=[\"coastline\"],\n    title=f\"Global surface temperature cross-section at {boulder_lat} degrees latitude\",\n    width=700,\n) * gf.grid(projection=projection)\n\nLet’s also look at the mean of the cross-section:\n\nprint(\n    f\"Mean at {boulder_lat} degrees lat (Boulder, CO, USA): {uxda_lat.mean().values} K\"\n)\n\n","type":"content","url":"/notebooks/uxarray-advanced#cross-sections","position":21},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Latitude interval","lvl2":"Cross-sections"},"type":"lvl3","url":"/notebooks/uxarray-advanced#latitude-interval","position":22},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Latitude interval","lvl2":"Cross-sections"},"content":"\n\nuxda_lat_interval = uxda_coarse.cross_section.constant_latitude_interval(\n    [boulder_lat - 15, boulder_lat + 15]\n)\n\nuxda_lat_interval.isel(time=0).plot(\n    rasterize=False,\n    projection=projection,\n    global_extent=True,\n    cmap=\"inferno\",\n    clim=(220, 310),\n    features=[\"coastline\"],\n    title=f\"Global surface temperature cross-section at the latitude interval [{boulder_lat-5},{boulder_lat+5}] degrees\",\n    width=700,\n) * gf.grid(projection=projection)\n\nprint(\n    f\"Mean at the latitude interval of [{boulder_lat-5},{boulder_lat+5}] degrees (-/+15 degrees Boulder, CO, USA): {uxda_lat_interval.mean().values} K\"\n)\n\n","type":"content","url":"/notebooks/uxarray-advanced#latitude-interval","position":23},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Non-conservative zonal mean"},"type":"lvl2","url":"/notebooks/uxarray-advanced#non-conservative-zonal-mean","position":24},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Non-conservative zonal mean"},"content":"\n\nCalculating the zonal mean is easy by providing the latitude range between -90 and 90 degrees with a step size in degrees:\n\n%%time\nzonal_mean_ts = uxda.isel(time=0).zonal_mean(lat=(-90, 90, 5))\n\n(\n    uxda.isel(time=0).plot(\n        cmap=\"inferno\",\n        # periodic_elements=\"split\",\n        height=300,\n        width=600,\n        colorbar=False,\n        ylim=(-90, 90),\n    )\n    + zonal_mean_ts.plot.line(\n        x=\"ts_zonal_mean\",\n        y=\"latitudes\",\n        height=300,\n        width=180,\n        ylabel=\"\",\n        ylim=(-90, 90),\n        xlim=(220, 310),\n        # xticks=[220, 250, 280, 310],\n        yticks=[-90, -45, 0, 45, 90],\n        grid=True,\n    )\n).opts(title=\"Temperature and its Zonal means at every 5 degree latitude\")\n\n","type":"content","url":"/notebooks/uxarray-advanced#non-conservative-zonal-mean","position":25},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Remapping"},"type":"lvl2","url":"/notebooks/uxarray-advanced#remapping","position":26},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl2":"Remapping"},"content":"\n\nNow, we will be looking into one of many possible use cases where remapping would be helpful.\n\nThe data set we have been using in this section so far belongs to the newer ICON simulation, icon_d3hp003, while there is an older simulation as well, icon_ngc4008, in the same catalog. They are both stored in the HEALPix format in this case, but for most of the model intercomparison workflows in general, they might not be even so. UXarray would still be helpful to remap of those model outputs to other and then make comparisons since it can support several most commonly used unstructrued grid formats.\n\nIn this particular case, we still have some use for UXarray’s remapping such that the newer simulation has the zoom = 9 as the maximum available resolution, while the older one has zoom = 10 available. Unfortunately at zoom = 10 though, there is no actual data simulated for ts, the surface temperature. If there was, we could remap the newer simulation’s output to that one, so we could have both of them at zoom = 10, and then we could look into the difference between them for instance. Let’s pretend the highest zoom-level in the newer data is zoom = 8 then, and remap that one into the older simulation’s grid.\n\nLet’s start with opening the older simulation run first:\n\nmodel_run_older = cat.online.icon_ngc4008\n\nds_older = model_run_older(zoom=8, time=\"P1D\").to_dask()\n\nuxds_older = ux.UxDataset.from_healpix(ds_older)\nuxds_older\n\n","type":"content","url":"/notebooks/uxarray-advanced#remapping","position":27},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Plot the older simulation for reference","lvl2":"Remapping"},"type":"lvl3","url":"/notebooks/uxarray-advanced#plot-the-older-simulation-for-reference","position":28},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Plot the older simulation for reference","lvl2":"Remapping"},"content":"Let’s have a quick look at how the global surface temperature looks like in the older simulation’s output:\n\nuxds_older[\"ts\"].isel(time=0).plot(\n    projection=projection,\n    cmap=\"inferno\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Global surface temperature (zoom = 8) - Older Simulation\",\n    width=700,\n)\n\nVisually there does not seem to be a huge difference between this and the newer simulation’s output we had plotted in the very beginning.\n\n","type":"content","url":"/notebooks/uxarray-advanced#plot-the-older-simulation-for-reference","position":29},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Remap the old simulation output to the newer one","lvl2":"Remapping"},"type":"lvl3","url":"/notebooks/uxarray-advanced#remap-the-old-simulation-output-to-the-newer-one","position":30},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Remap the old simulation output to the newer one","lvl2":"Remapping"},"content":"Let’s start remapping! For that, we will use the uxgrid of the newer simulation output as the destination grid and use an inverse distance weighted implementation:\n\n%%time\nuxda_older_remapped = uxds_older[\"ts\"].isel(time=0).remap.inverse_distance_weighted(\n    uxds.uxgrid, k=3, remap_to=\"face centers\", coord_type=\"cartesian\"\n)\n\n","type":"content","url":"/notebooks/uxarray-advanced#remap-the-old-simulation-output-to-the-newer-one","position":31},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Plot the difference between the old and newer simulations","lvl2":"Remapping"},"type":"lvl3","url":"/notebooks/uxarray-advanced#plot-the-difference-between-the-old-and-newer-simulations","position":32},{"hierarchy":{"lvl1":"UXarray for Advanced HEALPix Analysis & Visualization","lvl3":"Plot the difference between the old and newer simulations","lvl2":"Remapping"},"content":"Now that we have the older and newer model outputs on the same grid, let’s look at the surface temperature differences between the two:\n\n(uxda.isel(time=0) - uxda_older_remapped).plot(\n    projection=projection,\n    cmap=\"RdBu_r\",\n    features=[\"borders\", \"coastline\"],\n    title=\"Global surface temperature difference between older and newer simulations (zoom = 9)\",\n    clim=(-25,25),\n    width=700,\n)","type":"content","url":"/notebooks/uxarray-advanced#plot-the-difference-between-the-old-and-newer-simulations","position":33},{"hierarchy":{"lvl1":"When to Use Each?"},"type":"lvl1","url":"/notebooks/when-to-use-each","position":0},{"hierarchy":{"lvl1":"When to Use Each?"},"content":"This section is under construction. Please revisit soon!","type":"content","url":"/notebooks/when-to-use-each","position":1},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1}]}